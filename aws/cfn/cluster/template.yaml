AWSTemplateFormatVersion: 2010-09-09

Description: |
  The networking and cluster configuration to run fargate containers.
  - ECS Fargate
  - Application Load Balancer
    - ipv4 ONLY
    - internet-facing
    - certificate for HTTPS from ACM
  - HTTPS Listener
    - send naked domain to FE TargetGroup
    - send api.* subdomain to BE TargetGroup
  - HTTP Listener
    - redirect to HTTPS
  - Backend TargetGroup
  - Frontend TargetGroup

Parameters:
  NetworkingStack:
    Type: String
    Description: This is the base layer of networking components
    Default: CrdNet
  CertificateArn:
    Type: String
  FrontendPort:
    Type: Number
    Default: 3000
  BackendPort:
    Type: Number
    Default: 4567
  BackendHealthCheckInterval:
    Type: Number
    Default: 15
  BackendHealthCheckPath:
    Type: String
    Default: "/api/health-check"
  BackendHealthCheckPort:
    Type: String
    Default: "traffic-port"
  BackendHealthCheckProtocol:
    Type: String
    Default: "HTTP"
  BackendHealthCheckTimeoutSeconds:
    Type: Number
    Default: 5
  BackendHealthyThresholdCount:
    Type: Number
    Default: 2
  BackendUnhealthyThresholdCount:
    Type: Number
    Default: 2
  FrontendHealthCheckInterval:
    Type: Number
    Default: "15"
  FrontendHealthCheckPath:
    Type: String
    Default: "/"
  FrontendHealthCheckPort:
    Type: String
    Default: "traffic-port"
  FrontendHealthCheckProtocol:
    Type: String
    Default: "HTTP"
  FrontendHealthCheckTimeoutSeconds:
    Type: Number
    Default: 5
  FrontendHealthyThresholdCount:
    Type: Number
    Default: "2"
  FrontendUnhealthyThresholdCount:
    Type: Number
    Default: "2"

Resources:
  FargateCluster:
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-cluster.html
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${AWS::StackName}FargateCluster"
      CapacityProviders:
        - FARGATE
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Configuration:
        ExecuteCommandConfiguration:
          Logging: DEFAULT
      ServiceConnectDefaults:
        Namespace: cruddur
  LoadBalancer:
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-loadbalancer.html
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${AWS::StackName}LoadBalancer"
      Type: application
      IpAddressType: ipv4
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LBSecurityGroup
      Subnets:
        !Split
          - ","
          - Fn::ImportValue:
              !Sub "${NetworkingStack}PublicSubnetIds"
      LoadBalancerAttributes:
        # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-elasticloadbalancingv2-loadbalancer-loadbalancerattributes.html
        - Key: routing.http2.enabled
          Value: true
        - Key: routing.http.preserve_host_header.enabled
          Value: false
        - Key: deletion_protection.enabled
          Value: true
        - Key: load_balancing.cross_zone.enabled
          Value: true
        - Key: access_logs.s3.enabled
          Value: false
  #          # In case logs are needed, uncomment the following lines
  #        - Name: access_logs.s3.bucket
  #          Value: !Ref AccessLogsBucket
  #        - Name: access_logs.s3.prefix
  #          Value: !Sub "${AWS::StackName}/"
  HTTPSListener:
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listener.html#cfn-elasticloadbalancingv2-listener-certificates
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !Ref CertificateArn
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref FrontendTG
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
  HTTPListener:
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listener.html#cfn-elasticloadbalancingv2-listener-certificates
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-elasticloadbalancingv2-listener-redirectconfig.html
            StatusCode: HTTP_301
            Protocol: HTTPS
            Port: 443
            Host: '#{host}'
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
  ApiLBListenerRule:
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listenerrule.html
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref BackendTG
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values:
              - api.denisgulev.com
      ListenerArn: !Ref HTTPSListener
      Priority: 1
  LBSecurityGroup:
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-securitygroup.html#aws-resource-ec2-securitygroup--examples
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}LBSecurityGroup"
      GroupDescription: Allow Ingress traffic from the internet
      VpcId:
        Fn::ImportValue:
          !Sub "${NetworkingStack}VpcId"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: INTERNET HTTPS
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: INTERNET HTTP
  BackendTG:
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-targetgroup.html
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: !Ref BackendHealthCheckInterval
      HealthCheckPath: !Ref BackendHealthCheckPath
      HealthCheckPort: !Ref BackendHealthCheckPort
      HealthCheckProtocol: !Ref BackendHealthCheckProtocol
      HealthCheckTimeoutSeconds: !Ref BackendHealthCheckTimeoutSeconds
      HealthyThresholdCount: !Ref BackendHealthyThresholdCount
      IpAddressType: ipv4
      Matcher:
        HttpCode: 200
      Name: !Sub "${AWS::StackName}BackendTG"
      Port: !Ref BackendPort
      Protocol: HTTP
      ProtocolVersion: HTTP1
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "0"
      UnhealthyThresholdCount: !Ref BackendUnhealthyThresholdCount
      VpcId:
        Fn::ImportValue:
          !Sub "${NetworkingStack}VpcId"
  FrontendTG:
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-targetgroup.html
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: !Ref FrontendHealthCheckInterval
      HealthCheckPath: !Ref FrontendHealthCheckPath
      HealthCheckPort: !Ref FrontendHealthCheckPort
      HealthCheckProtocol: !Ref FrontendHealthCheckProtocol
      HealthCheckTimeoutSeconds: !Ref FrontendHealthCheckTimeoutSeconds
      HealthyThresholdCount: !Ref FrontendHealthyThresholdCount
      IpAddressType: ipv4
      Matcher:
        HttpCode: "200"
      Name: !Sub "${AWS::StackName}FrontendTG"
      Port: !Ref FrontendPort
      Protocol: "HTTP"
      ProtocolVersion: "HTTP1"
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "0"
      UnhealthyThresholdCount: !Ref FrontendUnhealthyThresholdCount
      VpcId:
        Fn::ImportValue:
          !Sub "${NetworkingStack}VpcId"

#Outputs: